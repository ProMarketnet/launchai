import { NextApiRequest, NextApiResponse } from 'next'
import { getServerSession } from "next-auth/next"
import { authOptions } from "./auth/[...nextauth]"
import { PrismaClient } from '@prisma/client'
import { jsPDF } from 'jspdf'

const prisma = new PrismaClient()

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getServerSession(req, res, authOptions)
  
  if (!session || !session.user) {
    return res.status(401).json({ error: 'Unauthorized' })
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const userId = (session.user as any).id
    const profile = await prisma.marketingProfile.findFirst({
      where: { userId: userId }
    })

    if (!profile) {
      return res.status(400).json({ error: 'Profile not found' })
    }

    // Generate PDF report
    const doc = new jsPDF()
    
    // Title
    doc.setFontSize(20)
    doc.text('Marketing Strategy Report', 20, 30)
    
    // Generated by
    doc.setFontSize(10)
    doc.text('Generated by LaunchAI', 20, 40)
    doc.text(new Date().toLocaleDateString(), 20, 45)
    
    // Profile section
    doc.setFontSize(16)
    doc.text('Your Profile', 20, 60)
    doc.setFontSize(12)
    doc.text(`Product Type: ${profile.productType}`, 20, 75)
    doc.text(`Target Audience: ${profile.audience}`, 20, 85)
    doc.text(`Budget: ${profile.budget}`, 20, 95)
    doc.text(`Timeline: ${profile.timeline}`, 20, 105)
    doc.text(`Primary Goal: ${profile.goals}`, 20, 115)
    doc.text(`Team Size: ${profile.team}`, 20, 125)
    doc.text(`Experience: ${profile.experience}`, 20, 135)
    
    // Strategy section
    doc.setFontSize(16)
    doc.text('Recommended Strategy', 20, 155)
    doc.setFontSize(12)
    
    // Optimal Timing
    doc.text('Optimal Timing:', 20, 170)
    if (profile.productType === 'SaaS/Software' && profile.audience === 'Business decision-makers (B2B)') {
      doc.text('Tuesday & Thursday, 10am-2pm perform 40% better for B2B SaaS', 25, 180)
    } else {
      doc.text('Best posting times depend on your specific audience and industry', 25, 180)
    }
    
    // Platform Priority
    doc.text('Platform Priority:', 20, 195)
    if (profile.productType === 'SaaS/Software' && profile.audience === 'Business decision-makers (B2B)') {
      doc.text('LinkedIn: 60% budget, Twitter: 30%, Instagram: 10%', 25, 205)
    } else if (profile.productType === 'Physical Product' && profile.audience === 'End users/consumers (B2C)') {
      doc.text('Instagram: 50%, TikTok: 30%, Facebook: 20%', 25, 205)
    } else {
      doc.text('Platform mix optimized for your target audience', 25, 205)
    }
    
    // Content Strategy
    doc.text('Content Strategy:', 20, 220)
    if (profile.productType === 'SaaS/Software') {
      doc.text('Demo videos outperform feature lists by 3.2x for your market', 25, 230)
    } else if (profile.productType === 'Physical Product') {
      doc.text('User-generated content drives 4x more conversions', 25, 230)
    } else {
      doc.text('Content recommendations based on your product type and audience', 25, 230)
    }
    
    // Budget Allocation
    doc.text('Budget Allocation:', 20, 245)
    doc.text(`Total Budget: ${profile.budget}`, 25, 255)
    doc.text('Recommended split: 60% content creation, 40% promotion', 25, 265)
    
    // Next Steps
    doc.setFontSize(16)
    doc.text('Next Steps', 20, 285)
    doc.setFontSize(12)
    doc.text('1. Create content calendar based on optimal timing', 25, 295)
    doc.text('2. Set up accounts on recommended platforms', 25, 305)
    doc.text('3. Develop content in recommended formats', 25, 315)
    doc.text('4. Launch with performance tracking', 25, 325)
    
    // Footer
    doc.setFontSize(10)
    doc.text('This report was generated by LaunchAI - AI-powered marketing strategy platform', 20, 280)
    
    // Generate PDF buffer
    const pdfBuffer = doc.output('arraybuffer')
    
    res.setHeader('Content-Type', 'application/pdf')
    res.setHeader('Content-Disposition', 'attachment; filename=marketing-strategy.pdf')
    res.send(Buffer.from(pdfBuffer))

  } catch (error) {
    console.error('Report generation error:', error)
    res.status(500).json({ error: 'Failed to generate report' })
  }
}
